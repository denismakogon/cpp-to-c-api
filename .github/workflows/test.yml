name: Build and test

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'src/*'
      - 'scripts/*'


jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        include:
          - os: macos-latest
            TARGET: macos

    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
        with:
          test-bot: false

      - name: 'configure Homebrew cache'
        id: cache
        uses: actions/cache@v3.0.3
        with:
          path: |
            /usr/local/Homebrew
            /usr/local/Cellar
            /usr/local/Frameworks
            /tmp/YOLOv5
          key: ${{ runner.os }}-rubygems-${{ steps.set-up-homebrew.outputs.gems-hash }}
          restore-keys: ${{ runner.os }}-rubygems-

      - name: 'install prerequisites'
        shell: bash
        run: |
          brew install gcc
          brew install opencv
          brew install dlib
          brew install pkg-config
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}

      - name: 'link libraries'
        shell: bash
        run: |
          brew link opencv
          brew link dlib
          pkg-config --modversion opencv4
          pkg-config --modversion dlib-1

      - name: 'compiling simplified up ONNX model'
        shell: bash
        run: |
          /bin/bash scripts/compile-yolo-onnx.sh yolov5s
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y.%m.%d')"

      - name: 'package compiled library'
        shell: bash
        run: |
          /bin/bash scripts/package-lib.sh ${{ steps.date.outputs.date }}

      - name: 'package library sources'
        shell: bash
        run: |
          /bin/bash scripts/package-sources.sh ${{ steps.date.outputs.date }}

      - name: 'testing files API'
        shell: bash
        run: |
          /bin/bash scripts/compile-test.sh tests/test_files.cpp
          ./build/tests/test_files.cpp.binary tests/data/cars-on-a-highway.jpeg

      - name: 'testing etc API'
        shell: bash
        run: |
          /bin/bash scripts/compile-test.sh tests/test_etc.cpp
          ./build/tests/test_etc.cpp.binary

      - name: 'testing image API'
        shell: bash
        run: |
          /bin/bash scripts/compile-test.sh tests/test_image.cpp
          ./build/tests/test_image.cpp.binary tests/data/cars-on-a-highway.jpeg

      - name: 'testing video API'
        shell: bash
        run: |
          /bin/bash scripts/compile-test.sh tests/test_image.cpp
          ./build/tests/test_video.cpp.binary tests/data/cars-passing-by.mp4 tests/data/cars-on-a-highway.jpeg

      - name: 'testing DNN on image API'
        shell: bash
        run: |
          /bin/bash scripts/compile-test.sh tests/test_dnn_on_images.cpp
          ./build/tests/test_dnn_on_images.cpp.binary /tmp/YOLOv5/models/simplified.onnx tests/data/coco.names tests/data/cars-on-a-highway.jpeg

      - name: 'testing DNN on image API'
        shell: bash
        run: |
          /bin/bash scripts/compile-test.sh tests/test_drawing.cpp
          ./build/tests/test_drawing.cpp.binary /tmp/YOLOv5/models/simplified.onnx tests/data/coco.names tests/data/cars-on-a-highway.jpeg

#      - name: 'testing DNN on video API'
#        shell: bash
#        run: |
#          /bin/bash scripts/compile-test.sh test_dnn_on_images.cpp
#          ./build/test_dnn_on_images.cpp.binary /tmp/YOLOv5/models/simplified.onnx tests/data/coco.names tests/data/cars-passing-by.mp4
